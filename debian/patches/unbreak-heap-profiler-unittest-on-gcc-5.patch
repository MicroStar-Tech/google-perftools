From eb725ff26371dfb5ae2523802c6abe75833cacef Mon Sep 17 00:00:00 2001
From: Aliaksey Kandratsenka <alk@tut.by>
Date: Sat, 1 Aug 2015 20:54:39 -0700
Subject: [PATCH] unbreak heap-profiler-unittest on gcc 5

gcc 5 has got nice new optimization (-fipa-icf) which merges identical
functions into one. And that causes heap-profiler_unittest to fail
since it expects to see both Allocate and Allocate2 in heap
profiles. And smart GCC detects that they are same function and makes
one function out of two and thus breaks this test.

New code simply adds (disabled) logging calls to make those functions
non-identical.
---
 src/tests/heap-profiler_unittest.cc | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/tests/heap-profiler_unittest.cc b/src/tests/heap-profiler_unittest.cc
index c71e56b..3317813 100644
--- a/src/tests/heap-profiler_unittest.cc
+++ b/src/tests/heap-profiler_unittest.cc
@@ -58,6 +58,9 @@ static const int kMaxCount = 100000;
 int* g_array[kMaxCount];              // an array of int-vectors
 
 static ATTRIBUTE_NOINLINE void Allocate(int start, int end, int size) {
+  // NOTE: we're using this to prevent gcc 5 from merging otherwise
+  // identical Allocate & Allocate2 functions.
+  VLOG(10, "Allocate");
   for (int i = start; i < end; ++i) {
     if (i < kMaxCount)
       g_array[i] = new int[size];
@@ -65,6 +68,7 @@ static ATTRIBUTE_NOINLINE void Allocate(int start, int end, int size) {
 }
 
 static ATTRIBUTE_NOINLINE void Allocate2(int start, int end, int size) {
+  VLOG(10, "Allocate2");
   for (int i = start; i < end; ++i) {
     if (i < kMaxCount)
       g_array[i] = new int[size];
