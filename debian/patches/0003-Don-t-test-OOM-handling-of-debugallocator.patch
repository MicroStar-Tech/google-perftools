From 736648887b0b27ec70a50f0954a614dd65c1eb12 Mon Sep 17 00:00:00 2001
From: Aliaksey Kandratsenka <alkondratenko@gmail.com>
Date: Sat, 24 Mar 2018 15:54:48 -0700
Subject: [PATCH 3/4] Don't test OOM handling of debugallocator

This may fix issue #969.

When testing OOM handling we set up sys allocator that fails memory
allocation. But debugallocator itself allocates some internal metadata
memory via malloc and crashes if those allocations fail. So
occasionally this test failed when debugallocator's internal malloc
ended up causing sys allocator.

So instead of failing tests from time to time, we drop it for debug
allocator. It's OOM handling is already crashy anyways.
---
 src/tests/tcmalloc_unittest.cc | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/tests/tcmalloc_unittest.cc b/src/tests/tcmalloc_unittest.cc
index a9c6429..8045a4d 100644
--- a/src/tests/tcmalloc_unittest.cc
+++ b/src/tests/tcmalloc_unittest.cc
@@ -1159,8 +1159,6 @@ static void TestNAllocXAlignment() {
   }
 }
 
-#endif // !DEBUGALLOCATION
-
 static int saw_new_handler_runs;
 static void* volatile oom_test_last_ptr;
 
@@ -1173,6 +1171,8 @@ static void test_new_handler() {
 }
 
 static ATTRIBUTE_NOINLINE void TestNewOOMHandling() {
+  // debug allocator does internal allocations and crashes when such
+  // internal allocation fails. So don't test it.
   setup_oomable_sys_alloc();
 
   std::new_handler old = std::set_new_handler(test_new_handler);
@@ -1193,6 +1193,7 @@ static ATTRIBUTE_NOINLINE void TestNewOOMHandling() {
   get_test_sys_alloc()->simulate_oom = false;
   std::set_new_handler(old);
 }
+#endif  // !DEBUGALLOCATION
 
 static int RunAllTests(int argc, char** argv) {
   // Optional argv[1] is the seed
@@ -1200,7 +1201,9 @@ static int RunAllTests(int argc, char** argv) {
 
   SetTestResourceLimit();
 
+#ifndef DEBUGALLOCATION
   TestNewOOMHandling();
+#endif
 
   // TODO(odo):  This test has been disabled because it is only by luck that it
   // does not result in fragmentation.  When tcmalloc makes an allocation which
-- 
2.16.3

